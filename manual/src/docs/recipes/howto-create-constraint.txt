[[howto-create-constraint]]
= Create a Constraint =

Constraints are defined in <<def-constraint>>.

== Method Constraint ==

Method Constraints are declared with annotations on the method argument. The annotation itself is custom, and it is possible to make your own.

[snippet,java]
-----------
source=manual/src/java/org/qi4j/manual/recipes/createConstraint/Dialer.java
tag=dialer
-----------

In the code above we say that we want the argument to the callPhoneNumber() method to be a valid phone number. This annotation is not built-in, so we need to declare it.

[snippet,java]
-----------
source=manual/src/java/org/qi4j/manual/recipes/createConstraint/PhoneNumber.java
tag=annotation
-----------

We then need to provide the Constraint implementation.

[snippet,java]
-----------
source=manual/src/java/org/qi4j/manual/recipes/createConstraint/PhoneNumberConstraint.java
tag=constraint
-----------

We also need to include the Constraint on the Composites we want to have them present.

[snippet,java]
-----------
source=manual/src/java/org/qi4j/manual/recipes/createConstraint/DialerComposite.java
tag=composite
-----------
[line-through]*Constraints doesn't throw any exceptions, as violation of constraints are domain specific. Instead, the Qi4j runtime will record all the violations in the InvocationContext, which is available to Concerns and Mixins. For instance;*
[source,java]
----
public class ParameterViolationConcern
    implements InvocationHandler
{
    @Structure private InvocationContext invocation;
    @ConcernFor private InvocationHandler next;
    public Object invoke( Object proxy, Method method, Object[] args )
        throws Exception
    {
        Collection<ConstraintViolation> violations =
            invocation.getConstraintViolations();
        if( violations.size() > 0 )
        {
            throw new MyConstraintVioaltionException( violations );
        }
        return next.invoke( proxy, method, args );
    }
}
----

== Property Constraint ==

Property Constraints are declared on the Property method.

[snippet,java]
-----------
source=manual/src/java/org/qi4j/manual/recipes/createConstraint/HasPhoneNumber.java
tag=property
-----------

In this case, the Constraint associated with the phoneNumber() method, will be called before the set() method on that Property is called. And any ConstraintViolations will be available to Concerns declared for the Property itself. For instance;

[source,java]
----
public class ParameterViolationConcern
    implements HasPhoneNumber
{
    @Structure private InvocationContext invocation;
    @ConcernFor private HasPhoneNumber next;
    @Concerns( CheckViolation.class )
    public abstract Property<String> phoneNumber();
    private abstract class CheckViolation
        implements Property<String>
    {
        @ConcernFor Property<String> next;
        public void set( String number )
        {
            Collection<ConstraintViolation> violations =
                invocation.getConstraintViolations();
            if( violations.size() > 0 )
            {
                throw new MyConstraintVioaltionException( violations );
            }
            return next.set( number );
        }
    }
}
----
