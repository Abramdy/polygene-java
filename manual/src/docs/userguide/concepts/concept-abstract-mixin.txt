//////////////////////
 * Copyright (c) 2007-2012, Niclas Hedhman. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
//////////////////////

[[def-abstract-mixin,Abstract Mixin]]
= Abstract Mixin =
An Abstract Mixin is an implementation of the MixinType interface, but is an abstract class and has not implemented
all the methods. The Qi4j runtime can use multiple Mixins for each MixinType interface. It is also possible to let
<<Generic Mixin>> handle the remaining missing methods.

Let's look at an example;
[source,java]
-------------
public interface Car
{
    void startEngine();

    void stopEngine();

    Property<Float> speed();

    void accelerate( int acceleratorPosition );

    void break( int breakForce );
}

public abstract class SpeedMixin
    implements Car
{
    private long lastTime;
    private float currentSpeed;

    public SpeedMixin()
    {
        currentSpeed = new ComputedPropertyInstance<Float>()
        {
            public Float get()
            {
                return currentSpeed;
            }
        };
    }

    public Property<Float> speed()
    {
        // Update the speed from time past and
        // accel/break applied.
        return currentSpeed;
    }

    public void accelerate( int acceleratorPosition )
    {
        // Update the speed from time past and
        // accel/break applied.
    }

    public void break( int breakForce )
    {
        // Update the speed from time past and
        // accel/break applied.
    }
}
-------------
In the example above, the SpeedMixin only implements some of the methods in the Car interface. By declaring the
SpeedMixin abstract, the compiler will have no problems with it, and the Qi4j runtime will create the necessary
subclass with the additional methods. But since the Mixin will only be serving the methods that it supports, the
generated subclass's startEngine() and stopEngine() methods, will never be called. They must be provided by some
other Mixin.