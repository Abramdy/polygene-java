description = "Qi4j Manuals and Website."

dependencies {
  compile( project( ":org.qi4j.core:org.qi4j.core.bootstrap" ) )
  compile( project( ":org.qi4j.libraries:org.qi4j.library.constraints" ) )
  compile( project( ":org.qi4j.libraries:org.qi4j.library.logging" ) )
  runtime( project( ":org.qi4j.core:org.qi4j.core.runtime" ) )
  runtime( libraries.logback )
}


//task userguide( type: org.qi4j.gradle.plugin.documentation.Documentation ) {
//  docName = 'userguide'
//  docType = 'book'
//}
//
//task recipes( type: org.qi4j.gradle.plugin.documentation.Documentation ) {
//  docName = 'recipes'
//  docType = 'article'
//}
//
//task referenceManual( type: org.qi4j.gradle.plugin.documentation.Documentation ) {
//  docName = 'reference'
//  docType = 'book'
//}


task website( type: org.qi4j.gradle.plugin.Documentation,
              dependsOn: rootProject.allprojects.tasks.flatten().findAll { it.name == AsciidocBuildInfo.TASK_NAME } ) {
  docName = 'website'
  docType = 'article'
}

task archiveWebsite( type: Copy ) {
  dependsOn website
  if( rootProject.version == '0' || rootProject.version.contains( "SNAPSHOT" ) )
  {
    into( "$rootProject.projectDir/../zest-svn/site/content/qi4j/develop" )
  }
  else
  {
    into( "$rootProject.projectDir/../zest-svn/site/content/qi4j/$version" )
  }
  from( 'build/docs/website/' )
}

task copyWebsite( type: Copy ) {
  dependsOn archiveWebsite
  if( rootProject.version != '0' && !rootProject.version.contains( "SNAPSHOT" ) )
  {
    from( "$rootProject.projectDir/../zest-svn/site/content/qi4j/$version/" )
    into( "$rootProject.projectDir/../zest-svn/site/content/qi4j/latest/" )
  }
}

task manuals() {
  dependsOn copyWebsite
//  dependsOn userguide
//  dependsOn referenceManual
//  dependsOn recipes
}
