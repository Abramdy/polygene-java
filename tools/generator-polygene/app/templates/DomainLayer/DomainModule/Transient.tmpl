<%#
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
-%>
package <%= polygene.packageName %>.model.<%= polygene.current.name %>;

import org.apache.polygene.api.injection.scope.Uses;
import org.apache.polygene.api.mixin.Mixins;
<%
for( var imp in polygene.current.imported ) {
    if( !imp.startsWith( "java.lang" )
        && imp.includes(".") ) {
        %><%- "import " + imp + ";"; %>
<%
    }
} %>

@Mixins( { <%= polygene.current.clazz.name %>.Mixin.class } )
public interface <%= polygene.current.clazz.name %>
{
<% for( var idx in polygene.current.state ) { %>
    <%- polygene.current.state[idx]; %>
<% } %>

    // If Property declarations are public, the Mixin must be abstract, because PropertyMixin will implement those methods.
    abstract class Mixin
        implements <%= polygene.current.clazz.name %>
    {
        // Transients supports @Uses injection
        //
        //  Socket socket = serverSockete.accept();
        //  TransientBuilder<<%= polygene.current.clazz.name %>> builder = transientBuilderFactory.newTransientBuilder(<%= polygene.current.clazz.name %>.class);
        //  builder.use( socket );
        //  builder.prototype().name().set( name + counter++ );
        //  <%= polygene.current.clazz.name %> <%= polygene.current.clazz.name.toLowerCase() %> = builder.newInstance();

//        @Uses
//        private Socket items;

    }
}
