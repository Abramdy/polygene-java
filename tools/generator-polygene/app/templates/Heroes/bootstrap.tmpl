<%#
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
-%>
package <%= packageName %>.bootstrap;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.apache.polygene.bootstrap.ApplicationAssembly;
import org.apache.polygene.bootstrap.AssemblyException;
import org.apache.polygene.bootstrap.LayerAssembly;
import org.apache.polygene.bootstrap.ModuleAssembly;
import org.apache.polygene.bootstrap.layered.LayeredApplicationAssembler;

import <%= packageName %>.bootstrap.connectivity.ConnectivityLayer;
import <%= packageName %>.bootstrap.domain.DomainLayer;
import <%= packageName %>.bootstrap.config.ConfigurationLayer;
import <%= packageName %>.bootstrap.infrastructure.InfrastructureLayer;

public class HeroesApplicationAssembler extends LayeredApplicationAssembler
{
    private static final String NAME = "Heroes";
    private static final String VERSION = "1.0.alpha";

    public HeroesApplicationAssembler( Application.Mode mode )
    throws AssemblyException
    {
        super( NAME, VERSION, mode );
    }

    @Override
    protected void assembleLayers( ApplicationAssembly assembly )
        throws AssemblyException
    {
        LayerAssembly configLayer = createLayer( ConfigurationLayer.class );
        ModuleAssembly configModule = assemblerOf( ConfigurationLayer.class ).configModule();
        LayerAssembly domainLayer = createLayer( DomainLayer.class );
        LayerAssembly infraLayer = new InfrastructureLayer( configModule ).assemble( assembly.layer( InfrastructureLayer.NAME ) );
        LayerAssembly connectivityLayer = createLayer( ConnectivityLayer.class );
        connectivityLayer.uses( domainLayer );
        domainLayer.uses( infraLayer );
        infraLayer.uses( configLayer );
    }
}

