<%#
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
-%>
package <%= polygene.packageName %>.app;

import <%= polygene.packageName %>.bootstrap.<%= polygene.name %>ApplicationAssembler;

import <%= polygene.packageName %>.bootstrap.config.ConfigModule;
import <%= polygene.packageName %>.bootstrap.config.ConfigurationLayer;
import javax.json.Json;
import javax.json.JsonWriter;

import org.apache.polygene.api.structure.Application;
import org.apache.polygene.api.structure.ApplicationDescriptor;
import org.apache.polygene.bootstrap.ApplicationAssembly;
import org.apache.polygene.bootstrap.AssemblyException;
import org.apache.polygene.bootstrap.ModuleAssembly;
import org.apache.polygene.bootstrap.layered.LayeredApplicationAssembler;
import org.apache.polygene.tools.model.descriptor.ApplicationDetailDescriptor;
import org.apache.polygene.tools.model.descriptor.ApplicationDetailDescriptorBuilder;
<%
if(  polygene.entitystore === 'MySQL' ) {
%>import java.util.HashMap;
<%
}
if( polygene.entitystore !== 'Memory' && polygene.entitystore !== 'Preferences' ) {
    if( polygene.entitystore.indexOf('SQL') < 0 ) {
%>import org.apache.polygene.entitystore.<%= polygene.entitystore.toLowerCase() %>.<%= polygene.entitystore %>EntityStoreConfiguration;
<% } else {
%>import org.apache.polygene.entitystore.sql.<%= polygene.entitystore %>EntityStoreConfiguration;
}
<%
    }
}
%>import org.apache.polygene.test.docker.DockerRule;
import org.junit.ClassRule;
import org.junit.Test;

public class BootstrapTest
{
    @Test
    public void applicationBootstrapSucceeds()
        throws Exception
    {
        <%= polygene.name %>Launcher launcher = new <%= polygene.name %>Launcher()
        {
            @Override
            protected LayeredApplicationAssembler createApplicationAssembler()
                throws AssemblyException
            {
<% if( polygene.hasFeature( 'security' ) ) {
%>                DevelopmentKeyManagement.initializeKeyStore();
<% }
%>                return new <%= polygene.name %>ApplicationAssembler( "LaunchTest", "0", Application.Mode.development, BootstrapTest.this::setupTest )
                {
                    @Override
                    protected void onModelCreated( ApplicationDescriptor model )
                    {
                        ApplicationDetailDescriptor modelDescription = ApplicationDetailDescriptorBuilder.createApplicationDetailDescriptor( model );
                        JsonWriter writer = Json.createWriter( System.out );
                        writer.writeObject( modelDescription.toJson() );
                        super.onModelCreated( model );
                    }
                };
            }
        };
        launcher.initialize();
        System.out.println("Application Launched...");
    }

    private void setupTest( ApplicationAssembly assembly )
    {
        entityStoreSetup( assembly );
    }
<%
if(  polygene.entitystore === 'Cassandra' ) {
%>
    private void entityStoreSetup( ApplicationAssembly assembly )
    {
        ModuleAssembly config = assembly.layer( ConfigurationLayer.NAME ).module( ConfigModule.NAME );
        CassandraEntityStoreConfiguration defaults = config.forMixin( CassandraEntityStoreConfiguration.class ).declareDefaults();
        String host = DOCKER.getDockerHost();
        int port = DOCKER.getExposedContainerPort( "9042/tcp" );
        System.out.println("Cassandra: " + host + ":" + port);
        defaults.hostnames().set( host + ':' + port );
        defaults.createIfMissing().set( true );
    }

    @ClassRule
    public static final DockerRule DOCKER = new DockerRule( "cassandra", "Starting listening for CQL clients" );
<% }
if(  polygene.entitystore === 'DerbySQL' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'File' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'Geode' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'H2SQL' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'Hazelcast' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'JClouds' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'Jdbm' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'LevelDB' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'Memory' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'MongoDB' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'MySQL' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }

    @ClassRule
    public static final DockerRule DOCKER = new DockerRule(
        "mysql",
        new HashMap<String, String>()
        {{
            put( "MYSQL_ROOT_PASSWORD", "" );
            put( "MYSQL_ALLOW_EMPTY_PASSWORD", "yes" );
            put( "MYSQL_DATABASE", "jdbc_test_db" );
            put( "MYSQL_ROOT_HOST", "172.17.0.1" );
        }},
        30000L
//        , "mysqld: ready for connections"   TODO: add this after next release of tdomzal/junit-docker-rule
    );
<% }
if(  polygene.entitystore === 'PostgreSQL' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }

    @ClassRule
    public static final DockerRule DOCKER =
        new DockerRule( "postgres", 3000L, "PostgreSQL init process complete; ready for start up." );
<% }
if(  polygene.entitystore === 'Preferences' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<% }
if(  polygene.entitystore === 'Redis' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }

    @ClassRule
    public static final DockerRule DOCKER = new DockerRule( "redis", 6379 );
<% }
if(  polygene.entitystore === 'Riak' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }

    @ClassRule
    public static final DockerRule DOCKER = new DockerRule( "riak","riak_auth_mods started on node");
<% }
if(  polygene.entitystore === 'SQLite' ) {
%>
    private void entityStoreSetup(ApplicationAssembly assembly )
    {
    }
<%
} %>
}
