<%#
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
-%>
package <%= packageName %>.app;

import java.lang.reflect.UndeclaredThrowableException;
import org.apache.zest.api.structure.Application;
import org.apache.zest.bootstrap.AssemblyException;
import org.apache.zest.bootstrap.layered.LayeredApplicationAssembler;
import org.apache.zest.library.restlet.ZrestApplication;
import org.restlet.Context;
import org.restlet.routing.Filter;
import org.restlet.routing.Router;
import org.restlet.security.Enroler;
import org.restlet.security.Verifier;

import <%= packageName %>.bootstrap.HeroesApplicationAssembler;
import <%= packageName %>.bootstrap.connectivity.ConnectivityLayer;
import <%= packageName %>.bootstrap.connectivity.RestApiModule;
import <%= packageName %>.model.heroes.Hero;
import <%= packageName %>.rest.security.SimpleEnroler;
import <%= packageName %>.rest.security.SimpleVerifier;

public class Heroes extends ZrestApplication
{

    public Heroes( Context context )
        throws AssemblyException
    {
        super( context );
    }

    @Override
    protected void addRoutes( Router router )
    {
        addResourcePath( "heroes", Hero.class, "/" );
    }

    @Override
    protected LayeredApplicationAssembler createApplicationAssembler( String mode )
        throws AssemblyException
    {
        if( mode != null )
        {
            return new HeroesApplicationAssembler( Application.Mode.valueOf( mode ) );
        }
        return new HeroesApplicationAssembler( Application.Mode.production );
    }

    @Override
    protected Verifier createVerifier()
    {
        return newObject( SimpleVerifier.class );
    }

    @Override
    protected Enroler createEnroler()
    {
        return newObject( SimpleEnroler.class, this );
    }

    @Override
    protected String getConnectivityLayer()
    {
        return ConnectivityLayer.NAME;
    }

    @Override
    protected String getConnectivityModule()
    {
        return RestApiModule.NAME;
    }

    private <T> T newObject( Class<T> type, Object... uses )
    {
        try
        {
            T instamce = type.newInstance();
            objectFactory.injectTo( instamce, uses );
            return instamce;
        }
        catch( Exception e )
        {
            throw new UndeclaredThrowableException( e );
        }
    }
}