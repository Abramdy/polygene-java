//apply plugin: 'eclipse'
//apply plugin: 'idea'
//apply plugin: 'java'
//apply plugin: 'maven'
//apply plugin: 'project-report'
//
//defaultTasks 'build'
//allprojects {
//  group = 'org.qi4j.extension'
//  repositories {
//    mavenCentral()
//    mavenRepo name: 'local', urls: "file:///" + System.properties[ 'user.home' ].replaceAll('\\\\', '/') + '/.gradle/repository/'
//    mavenRepo name: 'ops4j-repo', urls: "http://repository.ops4j.org/maven2/"
//  }
//  targetCompatibility = "1.6"
//  sourceCompatibility = "1.6"
//  version = System.properties.version ?: "0"
//  println "Building " + name + ", revision " + version
//
//  configurations {
//    deployerJars
//  }
//  dependencies {
//    deployerJars "org.apache.maven.wagon:wagon-ssh:1.0-beta-2"
//  }
//  uploadArchives {
//    repositories.mavenDeployer {
//      name = 'sshDeployer' // optional
//      configuration = configurations.deployerJars
//      repository(url: "scp://repository.ops4j.org/home/www/repository.ops4j.org/maven2")
//    }
//  }
//}
//
//def testProperties = [
//        'proxySet': System.properties[ 'proxySet' ],
//        'proxyHost': System.properties[ 'proxyHost' ],
//        'proxyPort': System.properties[ 'proxyPort' ]]
//
//// build a map of the dependency artifacts to use.  Allows centralized definition of the version of artifacts to
//// use.  In that respect it serves a role similar to <dependencyManagement> in Maven
//qi4jVersion = '0'
//osgiVersion = '4.2.0'
//slf4jVersion = '1.5.8'
//asmVersion = '3.3'
//servletVersion = '2.5'
//rdfVersion = '2.3.2'
//restletVersion = '2.0.4'
//
//libraries = [
//        // Ant
//        ant: 'org.apache.ant:ant:1.8.1',
//
//        // ASM
//        asm: 'asm:asm:' + asmVersion,
//        asm_util: 'asm:asm-util:' + asmVersion,
//        asm_commons: 'asm:asm-commons:' + asmVersion,
//
//        // logging
//        slf4j_api: 'org.slf4j:slf4j-api:' + slf4jVersion,
//        slf4j_simple: 'org.slf4j:slf4j-simple:' + slf4jVersion,
//        jcl_slf4j: 'org.slf4j:jcl-over-slf4j:' + slf4jVersion,
//        jcl_api: 'commons-logging:commons-logging-api:99.0-does-not-exist',  //ensure it is never used.
//        jcl: 'commons-logging:commons-logging:99.0-does-not-exist',  // ensure it is never used.
//
//        // OSGi
//        osgi_core: 'org.osgi:org.osgi.core:' + osgiVersion,
//        osgi_compendium: 'org.osgi:org.osgi.compendium:' + osgiVersion,
//        osgi_enterprise: 'org.osgi:org.osgi.enterprise:' + osgiVersion,
//
//        // Qi4j
//        qi4j_core_api: 'org.qi4j.core:qi4j-core-api:' + qi4jVersion,
//        qi4j_core_spi: 'org.qi4j.core:qi4j-core-spi:' + qi4jVersion,
//        qi4j_core_bootstrap: 'org.qi4j.core:qi4j-core-bootstrap:' + qi4jVersion,
//        qi4j_core_runtime: 'org.qi4j.core:qi4j-core-runtime:' + qi4jVersion,
//        qi4j_core_testsupport: 'org.qi4j.core:qi4j-core-testsupport:' + qi4jVersion,
//        qi4j_lib_constraints: 'org.qi4j.library:qi4j-lib-constraints:' + qi4jVersion,
//        qi4j_lib_locking: 'org.qi4j.library:qi4j-lib-locking:' + qi4jVersion,
//
//        // testing
//        junit: 'junit:junit:4.8.1',
//        mockito: 'org.mockito:mockito-core:1.8.5',
//        easymock: 'org.easymock:easymock:3.0',
//        jmock: 'org.jmock:jmock:2.5.1',
//        testng: 'org.testng:testng:5.8:jdk15',
//]
//
//
//subprojects { subProject ->
//
//  checkIfBuildDirFile = new File(subProject.projectDir.absolutePath + "/src/main/java")
//  if( checkIfBuildDirFile.isDirectory() )
//  {
//    apply plugin: 'eclipse'
//    apply plugin: 'idea'
//    apply plugin: 'java'
//    apply plugin: 'osgi'
//
//    jar {
//      baseName = 'qi4j-' + subProject.name
//      manifest {
//        version = subProject.version
//        license = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//        docURL = 'http://www.qi4j.org'
//        description = 'Qi4j is a platform for Composite Oriented Programming'
//        name = group + "." + subProject.name  // default name if forgotten in sub-project.
//        vendor = 'Qi4j Community, http://www.qi4j.org'
//        symbolicName = subProject.group + "." + subProject.name
//        instruction '-debug', 'true'
//      }
//    }
//
//    test {
//      maxHeapSize = "1024m"
//      systemProperties = testProperties
//    }
//
//    configurations {
//      archives.extendsFrom compile
//    }
//    repositories {
//      flatDir(name: 'fileRepo', dirs: System.properties[ 'user.home' ] + '/.gradle/repository/org/qi4j/core/' + 'qi4j-core-' + name + '/' + version + '/')
//    }
//    uploadArchives {
//      uploadDescriptor = true
//      repositories {
//        add project.repositories.fileRepo
//      }
//    }
//    uploadArchives << {
//      if( System.properties[ 'version' ] == null )
//        throw new GradleException("'version' must be given as a system property to perform a release.")
//    }
//  }
//  ideaModule {
//    // Use explicitly separate compilation output directories for Gradle and IntelliJ
//    File baseDirectory = new File(subProject.buildDir, "idea/classes")
//    outputDir = new File(baseDirectory, "main")
//    testOutputDir = new File(baseDirectory, "test")
//    whenConfigured { module ->
//      module.dependencies*.exported = true
//    }
//  }
//  dependsOnChildren()
//}
//
////
//// This is a task that generates the gradlew scripts, allowing users to run gradle without having gradle installed
//// on their system.
//// This task should be run by "build master" and the resulting ouput committed to source control.  Its outputs include:
////  1) /gradlew which is the *NIX shell script for executing builds
////  2) /gradlew.bat which is the windows bat script for for executing builds
////  3) /wrapper which is a directory named by the "jarPath" config which contains other needed files.
//task wrapper(type: Wrapper) {
//  gradleVersion = '0.9'
//  jarPath = 'wrapper'
//}