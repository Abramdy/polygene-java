apply plugin: 'eclipse'
apply plugin: 'idea'


defaultTasks 'build'


allprojects {

  repositories {
    mavenCentral()
    mavenRepo name: 'ops4j-repo', urls: "http://repository.ops4j.org/maven2/"
  }
}

group = 'org.qi4j.core'
gradle.taskGraph.whenReady { graph ->

  if( !graph.hasTask('release') )
  {
    if( graph.hasTask('snapshot') )
    version = System.currentTimeMillis();
    else
      version = 'dev'
  }
  else if( !project.hasProperty('version') )
  {
    throw new GradleException('Please specify a version when doing a release')
  }
}

// build a map of the dependency artifacts to use.  Allows centralized definition of the version of artifacts to
// use.  In that respect it serves a role similar to <dependencyManagement> in Maven
slf4jVersion = '1.5.8'
asmVersion = '3.3'

libraries = [
        // Ant
        ant: 'org.apache.ant:ant:1.8.1',

        // ASM
        asm: 'asm:asm:' + asmVersion,
        asm_util: 'asm:asm-util:' + asmVersion,
        asm_commons: 'asm:asm-commons:' + asmVersion,

        // logging
        slf4j_api: 'org.slf4j:slf4j-api:' + slf4jVersion,
        slf4j_simple: 'org.slf4j:slf4j-simple:' + slf4jVersion,
        jcl_slf4j: 'org.slf4j:jcl-over-slf4j:' + slf4jVersion,
        jcl_api: 'commons-logging:commons-logging-api:99.0-does-not-exist',  //ensure it is never used.
        jcl: 'commons-logging:commons-logging:99.0-does-not-exist',  // ensure it is never used.

        // testing
        junit: 'junit:junit:4.8.1',
        easymock: 'org.easymock:easymock:3.0',
        testng: 'org.testng:testng:5.8:jdk15',
]


subprojects { subProject ->

  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'java'

  // minimize changes, at least for now (gradle uses 'build' by default)..
  buildDir = "target"

  test {
    maxHeapSize = "1024m"
  }

  targetCompatibility = "1.6"
  sourceCompatibility = "1.6"

  ideaModule {
    // Use explicitly separate compilation output directories for Gradle and IntelliJ
    File baseDirectory = new File(subProject.buildDir, "idea/classes")
    outputDir = new File(baseDirectory, "main")
    testOutputDir = new File(baseDirectory, "test")
    whenConfigured { module ->
      module.dependencies*.exported = true
    }
  }

  dependsOnChildren()

//
// This is a task that generates the gradlew scripts, allowing users to run gradle without having gradle installed
// on their system.
// This task should be run by "build master" and the resulting ouput committed to source control.  Its outputs include:
//  1) /gradlew which is the *NIX shell script for executing builds
//  2) /gradlew.bat which is the windows bat script for for executing builds
//  3) /wrapper which is a directory named by the "jarPath" config which contains other needed files.
  task wrapper(type: Wrapper) {
    gradleVersion = '0.9-rc-1'
    jarPath = 'wrapper'
  }
}