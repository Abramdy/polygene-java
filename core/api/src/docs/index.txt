[[qi4j-core-api]]
Qi4j Core API
==============

The Qi4j Core API is main API that Qi4j developers interact with. In fact, if you need to use classes/interfaces
in the Qi4j Core SPI or Qi4j Core Runtime, then please contact the Qi4j Community and explain your use-case.

The Core API is strictly layered, with no _spaghetti_ cross packages. The package list is fairly long, and
we will look at each one in detail further down.

[width="80%",options="header"]
|=======
| Package       | Brief Description
| association   | Associations between Entities.
| cache         | Unit of Work caching options.
| common        | Various low level annotations, enums and meta types.
| composite     | Main package for Composites
| concern       | Concern fragments.
| configuration | Configuration system, integrated into entity system.
| constraint    | Constraint fragments.
| dataset       | Dataset and Query management.
| entity        | Entity composites.
| event         | System events.
| injection     | Dependency Injection handling.
| json          | JSON parsing and formatting.
| mixin         | Mixin fragments.
| object        | Java Object composition support.
| property      | Property API
| service       | Service composites
| sideeffect    | SideEffect fragments.
| structure     | Application structure types.
| type          | Low level types, mostly internal requirements.
| unitofwork    | Unit of work management.
| usecase       | Use-case type and builder.
| util          | Utility classes
| value         | Value composites.
|=======


[snippet,java]
----
component=org.qi4j.core.api
source=org/qi4j/api/unitofwork/UnitOfWorkTemplateTest.java
tag=exampleOfUowTemplate
classifier=test-sources
----


// In Java, using the query language looks something like this:

// [snippet,java]
// ----
// component=neo4j-cypher
// source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
// tag=JavaQuery
// classifier=test-sources
// ----

// [[cypher-parameters]]
// == Parameters ==

// Cypher supports querying with parameters. This allows developers to not to have to do string building
// to create a query, and it also makes caching of execution plans much easier for Cypher.

// Parameters can be used for literals in the +WHERE+ clause, for the index key and index value in the +START+
// clause, index queries, and finally for node/relationship ids.

// Accepted names for parameter are letters and number, and any combination of these.


// Here follows a few examples of how you can use parameters from Java.

// [snippet,java]
// ----
// component=neo4j-cypher
// source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
// tag=exampleWithParameterForNodeId
// classifier=test-sources
// ----
//
// [snippet,java]
// ----
// component=neo4j-cypher
// source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
// tag=exampleWithParameterForNode
// classifier=test-sources
// ----

// [snippet,java]
// ----
// component=neo4j-cypher
// source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
// tag=exampleWithParameterForMultipleNodeIds
// classifier=test-sources
// ----

// [snippet,java]
// ----
// component=neo4j-cypher
// source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
// tag=exampleWithStringLiteralAsParameter
// classifier=test-sources
// ----

// [snippet,java]
// ----
// component=neo4j-cypher
// source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
// tag=exampleWithParametersForIndexKeyAndValue
// classifier=test-sources
// ----

// [snippet,java]
// ----
// component=neo4j-cypher
// source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
// tag=exampleWithParametersForQuery
// classifier=test-sources
// ----

// [snippet,java]
// ----
// component=neo4j-cypher
// source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
// tag=exampleWithParameterForSkipLimit
// classifier=test-sources
// ----

// [snippet,java]
// ----
// component=neo4j-cypher
// source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
// tag=exampleWithParameterRegularExpression
// classifier=test-sources
// ----

// [[cypher-identifiers]]
// == Identifiers ==

// When you reference parts of the pattern, you do so by naming them.

// Identifiers can be lower or upper case, and may contain underscore.
// If other characters are needed, you can use the +`+ sign.
// The same rules apply to property names.

// [snippet,cypher]
// ----
// component=neo4j-cypher
// source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
// tag=Identifier
// classifier=test-sources
// ----


