/*  Copyright 2008 Edward Yakop.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
* implied.
*
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package org.qi4j.library.swing.visualizer.detailPanel.internal.common.form.composite.mixin;

import com.jgoodies.forms.factories.DefaultComponentFactory;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import java.lang.reflect.Constructor;
import java.awt.Dimension;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JSplitPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import static org.qi4j.library.swing.visualizer.detailPanel.internal.common.CollectionUtils.toList;
import org.qi4j.library.swing.visualizer.detailPanel.internal.common.form.ListListModel;
import static org.qi4j.library.swing.visualizer.detailPanel.internal.common.form.ListListModel.EMPTY_MODEL;
import org.qi4j.library.swing.visualizer.model.ConstructorDetailDescriptor;
import org.qi4j.library.swing.visualizer.model.InjectedParametersDetailDescriptor;
import org.qi4j.spi.composite.ConstructorDescriptor;
import org.qi4j.spi.composite.DependencyDescriptor;
import org.qi4j.spi.composite.InjectedParametersDescriptor;

/**
 * TODO Localization
 *
 * @author edward.yakop@gmail.com
 * @since 0.5
 */
public final class ConstructorsPanel
{
    private JComponent constructorSeparator;
    private JTextField constructorName;

    private JTextField constructorClassName;
    private JComponent parametersSeparator;

    private JList constructorParameters;
    private DepedencyDescriptorPanel dependencyDescriptor;

    private JList constructors;

    private JPanel constructorsPanel;

    public ConstructorsPanel()
    {
        $$$setupUI$$$();

        constructors.addListSelectionListener( new ConstructorSelectionListener() );
        constructorParameters.addListSelectionListener( new ConstructorParameterSelectionListener() );
    }

    @SuppressWarnings( "unchecked" )
    public final void updateModel( Iterable<ConstructorDetailDescriptor> aDescriptor )
    {
        ListListModel constructorsModel = null;

        if( aDescriptor != null )
        {
            constructorsModel = new ListListModel( toList( aDescriptor ) );
        }

        constructors.setModel( constructorsModel );
        constructors.setSelectedIndex( 0 );
    }

    private void createUIComponents()
    {
        DefaultComponentFactory cmpFactory = DefaultComponentFactory.getInstance();
        constructorSeparator = cmpFactory.createSeparator( "Constructor" );
        parametersSeparator = cmpFactory.createSeparator( "Parameters" );
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        createUIComponents();
        constructorsPanel = new JPanel();
        constructorsPanel.setLayout( new FormLayout( "fill:max(p;60dlu):noGrow,left:4dlu:noGrow,fill:d:noGrow,fill:p:grow", "center:d:noGrow,fill:p:grow,fill:p:noGrow" ) );
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setOneTouchExpandable( true );
        CellConstraints cc = new CellConstraints();
        constructorsPanel.add( splitPane1, cc.xywh( 1, 1, 4, 3 ) );
        constructors = new JList();
        constructors.setMinimumSize( new Dimension( 60, 0 ) );
        splitPane1.setLeftComponent( constructors );
        final JPanel panel1 = new JPanel();
        panel1.setLayout( new FormLayout( "fill:max(p;60dlu):noGrow,left:4dlu:noGrow,fill:max(m;150dlu):noGrow,left:m:grow", "center:d:noGrow,top:4dlu:noGrow,center:18px:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:8dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,fill:p:grow" ) );
        ( (FormLayout) panel1.getLayout() ).setRowGroups( new int[][]{ new int[]{ 3, 5 }, new int[]{ 1, 7 } } );
        splitPane1.setRightComponent( panel1 );
        panel1.add( constructorSeparator, cc.xyw( 1, 1, 4 ) );
        final JLabel label1 = new JLabel();
        label1.setText( "Name" );
        panel1.add( label1, cc.xy( 1, 3 ) );
        final JLabel label2 = new JLabel();
        label2.setText( "Class name" );
        panel1.add( label2, cc.xy( 1, 5 ) );
        constructorName = new JTextField();
        constructorName.setEditable( false );
        panel1.add( constructorName, cc.xy( 3, 3, CellConstraints.FILL, CellConstraints.DEFAULT ) );
        constructorClassName = new JTextField();
        constructorClassName.setEditable( false );
        constructorClassName.setText( "" );
        panel1.add( constructorClassName, cc.xy( 3, 5, CellConstraints.FILL, CellConstraints.DEFAULT ) );
        parametersSeparator.setRequestFocusEnabled( false );
        panel1.add( parametersSeparator, cc.xyw( 1, 7, 4 ) );
        final JSplitPane splitPane2 = new JSplitPane();
        splitPane2.setOneTouchExpandable( true );
        panel1.add( splitPane2, cc.xyw( 1, 9, 4 ) );
        constructorParameters = new JList();
        constructorParameters.setMinimumSize( new Dimension( 60, 0 ) );
        constructorParameters.setSelectionMode( 0 );
        splitPane2.setLeftComponent( constructorParameters );
        dependencyDescriptor = new DepedencyDescriptorPanel();
        splitPane2.setRightComponent( dependencyDescriptor.$$$getRootComponent$$$() );
        label1.setLabelFor( constructorName );
        label2.setLabelFor( constructorClassName );
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return constructorsPanel;
    }

    private class ConstructorParameterSelectionListener
        implements ListSelectionListener
    {
        public final void valueChanged( ListSelectionEvent e )
        {
            DependencyDescriptor selectedParameter = (DependencyDescriptor) constructorParameters.getSelectedValue();
            dependencyDescriptor.updateModel( selectedParameter );
        }
    }

    private class ConstructorSelectionListener
        implements ListSelectionListener
    {
        @SuppressWarnings( "unchecked" )
        public final void valueChanged( ListSelectionEvent e )
        {
            ConstructorDetailDescriptor contructorDDesc = (ConstructorDetailDescriptor) constructors.getSelectedValue();

            String constructorNameStr = null;
            ListListModel paramsModel = EMPTY_MODEL;

            if( contructorDDesc != null )
            {
                ConstructorDescriptor descriptor = contructorDDesc.descriptor();
                Constructor constructor = descriptor.constructor();
                constructorNameStr = constructor.getName();

                InjectedParametersDetailDescriptor parameters = contructorDDesc.parameters();
                InjectedParametersDescriptor parametersDescriptor = parameters.descriptor();

                Iterable<? extends DependencyDescriptor> dependencies = parametersDescriptor.dependencies();
                paramsModel = new ListListModel( toList( dependencies ) );
            }

            constructorClassName.setText( constructorNameStr );
            constructorParameters.setModel( paramsModel );
            constructorParameters.setSelectedIndex( 0 );
        }
    }
}
