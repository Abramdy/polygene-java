/*  Copyright 2008 Edward Yakop.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
* implied.
*
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package org.qi4j.library.swing.visualizer.detailPanel.internal.form.object;

import com.jgoodies.forms.factories.DefaultComponentFactory;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.lang.reflect.Constructor;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import static org.qi4j.library.swing.visualizer.detailPanel.internal.common.CollectionUtils.toList;
import org.qi4j.library.swing.visualizer.detailPanel.internal.form.common.ListListModel;
import static org.qi4j.library.swing.visualizer.detailPanel.internal.form.common.ListListModel.EMPTY_MODEL;
import org.qi4j.library.swing.visualizer.model.descriptor.ConstructorDetailDescriptor;
import org.qi4j.library.swing.visualizer.model.descriptor.InjectedParametersDetailDescriptor;
import org.qi4j.spi.composite.ConstructorDescriptor;
import org.qi4j.spi.composite.DependencyDescriptor;
import org.qi4j.spi.composite.InjectedParametersDescriptor;

/**
 * TODO Localization
 *
 * @author edward.yakop@gmail.com
 * @since 0.5
 */
public final class ConstructorDescriptorForm
{
    private JComponent constructorSeparator;
    private JTextField constructorName;

    private JTextField constructorClassName;
    private JComponent parametersSeparator;

    private JList constructorParameters;
    private DependencyDescriptorForm dependencyDescriptor;

    private JPanel constructorForm;

    public ConstructorDescriptorForm()
    {
        $$$setupUI$$$();
        constructorParameters.addListSelectionListener( new ConstructorParameterSelectionListener() );
        constructorParameters.setCellRenderer( new DependencyDescriptorListCellRenderer() );
    }

    @SuppressWarnings( "unchecked" )
    public final void updateModel( ConstructorDetailDescriptor aDescriptor )
    {
        String constructorNameStr = null;
        String constructorClassNameStr = null;
        ListListModel paramsModel = EMPTY_MODEL;

        if( aDescriptor != null )
        {
            ConstructorDescriptor descriptor = aDescriptor.descriptor();
            Constructor constructor = descriptor.constructor();
            Class declaringClass = constructor.getDeclaringClass();
            constructorNameStr = declaringClass.getSimpleName();
            constructorClassNameStr = declaringClass.getName();

            InjectedParametersDetailDescriptor parameters = aDescriptor.parameters();
            InjectedParametersDescriptor parametersDescriptor = parameters.descriptor();

            Iterable<? extends DependencyDescriptor> dependencies = parametersDescriptor.dependencies();
            paramsModel = new ListListModel( toList( dependencies ) );
        }

        constructorName.setText( constructorNameStr );
        constructorClassName.setText( constructorClassNameStr );
        constructorParameters.setModel( paramsModel );
        constructorParameters.setSelectedIndex( 0 );
    }

    private void createUIComponents()
    {
        DefaultComponentFactory cmpFactory = DefaultComponentFactory.getInstance();
        constructorSeparator = cmpFactory.createSeparator( "Constructor" );
        parametersSeparator = cmpFactory.createSeparator( "Parameters" );
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        createUIComponents();
        constructorForm = new JPanel();
        constructorForm.setLayout( new FormLayout( "fill:4px:noGrow,fill:max(p;65dlu):noGrow,left:4dlu:noGrow,fill:max(p;75dlu):noGrow,left:4dlu:noGrow,fill:max(p;80dlu):grow,left:4px:noGrow,fill:d:noGrow", "top:4px:noGrow,center:p:noGrow,top:4dlu:noGrow,center:p:noGrow,top:4dlu:noGrow,center:p:noGrow,top:4dlu:noGrow,center:p:noGrow,center:max(d;4px):noGrow,fill:max(p;65dlu):noGrow,top:4px:noGrow" ) );
        ( (FormLayout) constructorForm.getLayout() ).setRowGroups( new int[][]{ new int[]{ 4, 6 }, new int[]{ 3, 9 }, new int[]{ 5, 7 }, new int[]{ 1, 11 }, new int[]{ 2, 8 } } );
        ( (FormLayout) constructorForm.getLayout() ).setColumnGroups( new int[][]{ new int[]{ 3, 5 }, new int[]{ 1, 7 } } );
        final JLabel label1 = new JLabel();
        label1.setText( "Name" );
        CellConstraints cc = new CellConstraints();
        constructorForm.add( label1, cc.xy( 2, 4 ) );
        final JLabel label2 = new JLabel();
        label2.setText( "Class name" );
        constructorForm.add( label2, cc.xy( 2, 6 ) );
        constructorForm.add( constructorSeparator, cc.xyw( 2, 2, 5 ) );
        constructorName = new JTextField();
        constructorName.setEditable( false );
        constructorForm.add( constructorName, cc.xy( 4, 4, CellConstraints.FILL, CellConstraints.DEFAULT ) );
        constructorClassName = new JTextField();
        constructorClassName.setEditable( false );
        constructorClassName.setText( "" );
        constructorForm.add( constructorClassName, cc.xy( 4, 6, CellConstraints.FILL, CellConstraints.DEFAULT ) );
        constructorParameters = new JList();
        constructorParameters.setMinimumSize( new Dimension( 60, 0 ) );
        constructorParameters.setSelectionMode( 0 );
        constructorForm.add( constructorParameters, cc.xy( 2, 10 ) );
        dependencyDescriptor = new DependencyDescriptorForm();
        constructorForm.add( dependencyDescriptor.$$$getRootComponent$$$(), cc.xyw( 4, 10, 3 ) );
        parametersSeparator.setRequestFocusEnabled( false );
        constructorForm.add( parametersSeparator, cc.xyw( 2, 8, 5 ) );
        label1.setLabelFor( constructorName );
        label2.setLabelFor( constructorClassName );
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return constructorForm;
    }

    private class ConstructorParameterSelectionListener
        implements ListSelectionListener
    {
        public final void valueChanged( ListSelectionEvent e )
        {
            DependencyDescriptor selectedParameter = (DependencyDescriptor) constructorParameters.getSelectedValue();
            dependencyDescriptor.updateModel( selectedParameter );
        }
    }

    private static class DependencyDescriptorListCellRenderer extends DefaultListCellRenderer
    {
        @Override
        public final Component getListCellRendererComponent(
            JList list, Object value, int index, boolean isSelected, boolean cellHasFocus )
        {
            DependencyDescriptor depDescriptor = (DependencyDescriptor) value;
            String label =
                "@" + depDescriptor.injectionAnnotation().annotationType().getSimpleName() + " " +
                depDescriptor.injectionClass().getSimpleName();
            return super.getListCellRendererComponent( list, label, index, isSelected, cellHasFocus );
        }
    }
}
